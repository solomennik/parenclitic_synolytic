train_roc <- pROC::roc(subset(df, df$label == "TRAIN")$score, subset(df, df$label == "TRAIN")$prediction )
results <- rbind(results, data.frame(train_directions = train_roc$direction, prediction = temp_test$prediction,
score = temp_test$score, id = rownames(temp_test),
characteristic = m))
}
return(results)
}
getting_predictions_on_test_for_raw_data(all_data, type_of_data,loocv_range, 19, models) {
getting_predictions_on_test_for_raw_data(all_data, type_of_data,loocv_range, num_of_main, models) {
getting_predictions_on_test_for_raw_data <- function(all_data, type_of_data,loocv_range, num_of_main, models) {
results <- data.frame()
for(i in loocv_range) {
data <- all_data[[i]][[1]]
proteins <- all_data[[i]][[2]]
temp <- getting_prediction_on_raw_data_for_test(data, proteins, type_of_data, models)
temp$run <- i
results <- rbind(results, temp)
}
data <- all_data[[num_of_main]][[1]]
proteins <- all_data[[num_of_main]][[2]]
temp <- getting_prediction_on_raw_data_for_test(data, proteins, type_of_data, models)
temp$run <- "main"
results <- rbind(results, temp)
return(results)
}
raw_data <- getting_predictions_on_test_for_raw_data(all_data, "Usual",c(1:18), 19, models)
raw_data
raw_data_long <- getting_predictions_on_test_for_raw_data(all_data_long, "Usual",c(1:18), 19, models)
all_data_long
raw_data_long <- getting_predictions_on_test_for_raw_data(all_data_long, "Usual",c(1:18), 19, models)
raw_data_long <- getting_predictions_on_test_for_raw_data(all_data_long, "Long",c(1:18), 19, models)
############## calculate AUC for each method, for each characteristic, for loocv and for main
raw_data_aucs <- auc_calculation(raw_data, "main", models)
raw_data
glm
getting_predictions_on_test_for_raw_data <- function(all_data, type_of_data,loocv_range, num_of_main, models) {
results <- data.frame()
for(i in loocv_range) {
data <- all_data[[i]][[1]]
proteins <- all_data[[i]][[2]]
temp <- getting_prediction_on_raw_data_for_test(data, proteins, type_of_data, models)
temp$run <- i
results <- rbind(results, temp)
}
data <- all_data[[num_of_main]][[1]]
proteins <- all_data[[num_of_main]][[2]]
temp <- getting_prediction_on_raw_data_for_test(data, proteins, type_of_data, models)
temp$run <- "main"
results <- rbind(results, temp)
return(results)
}
getting_prediction_on_raw_data_for_test <- function(data, proteins, type_of_data, models) {
results = data.frame()
if (type == "Long") {
proteins <-  c(str_c(proteins,"_A_index"), str_c(proteins,"_B_index"),str_c(proteins,"_C_index"),str_c(proteins,"_D_index"))
}
df <- data[c(proteins, "score", "label")]
is.na(df)<-sapply(df, is.infinite)
df[is.na(df)]<-0
rownames(df) <- data$id
df_train <- subset(df,df$label == "TRAIN")[1:(ncol(df)-1)]
results <- data.frame()
for(m in models) {
M <- predicted_models(df_train, m)
df$prediction <- predict(M, df, type="prob")[,2]
temp_test <- subset(df, df$label == "TEST")
train_roc <- pROC::roc(subset(df, df$label == "TRAIN")$score, subset(df, df$label == "TRAIN")$prediction )
results <- rbind(results, data.frame(train_directions = train_roc$direction, prediction = temp_test$prediction,
score = temp_test$score, id = rownames(temp_test),
characteristic = m, type_of_approach = str_c(type_of_data,"_", m)))
}
return(results)
}
PATH = "/Users/Shared/Previously Relocated Items/Security/OC_synolitic_and_longit/" #PATH to main folder
source(paste0(PATH, "functions/general_functions.R")) #add functions
source(paste0(PATH, "functions/networks_functions.R")) #add functions of networks
# load data
load(paste0(PATH,"1_DATA/all_data.RData"))
load(paste0(PATH,"1_DATA/all_data_long.RData"))
############## getting predictions on raw data
models <- c("xgbTree", "nnet", "glmnet")
results_on_raw_data <- data.frame()
PATH = "/Users/Shared/Previously Relocated Items/Security/OC_synolitic_and_longit/" #PATH to main folder
source(paste0(PATH, "functions/general_functions.R")) #add functions
source(paste0(PATH, "functions/networks_functions.R")) #add functions of networks
# load data
load(paste0(PATH,"1_DATA/all_data.RData"))
load(paste0(PATH,"1_DATA/all_data_long.RData"))
############## getting predictions on raw data
models <- c("xgbTree", "nnet", "glmnet")
results_on_raw_data <- data.frame()
raw_data <- getting_predictions_on_test_for_raw_data(all_data, "Usual",c(1:18), 19, models)
raw_data_long <- getting_predictions_on_test_for_raw_data(all_data_long, "Long",c(1:18), 19, models)
PATH = "/Users/Shared/Previously Relocated Items/Security/OC_synolitic_and_longit/" #PATH to main folder
source(paste0(PATH, "functions/general_functions.R")) #add functions
source(paste0(PATH, "functions/networks_functions.R")) #add functions of networks
# load data
load(paste0(PATH,"1_DATA/all_data.RData"))
load(paste0(PATH,"1_DATA/all_data_long.RData"))
############## getting predictions on raw data
models <- c("xgbTree", "nnet", "glmnet")
results_on_raw_data <- data.frame()
raw_data <- getting_predictions_on_test_for_raw_data(all_data, "Usual",c(1:18), 19, models)
getting_prediction_on_raw_data_for_test <- function(data, proteins, type_of_data, models) {
results = data.frame()
if (type_of_data == "Long") {
proteins <-  c(str_c(proteins,"_A_index"), str_c(proteins,"_B_index"),str_c(proteins,"_C_index"),str_c(proteins,"_D_index"))
}
df <- data[c(proteins, "score", "label")]
is.na(df)<-sapply(df, is.infinite)
df[is.na(df)]<-0
rownames(df) <- data$id
df_train <- subset(df,df$label == "TRAIN")[1:(ncol(df)-1)]
results <- data.frame()
for(m in models) {
M <- predicted_models(df_train, m)
df$prediction <- predict(M, df, type="prob")[,2]
temp_test <- subset(df, df$label == "TEST")
train_roc <- pROC::roc(subset(df, df$label == "TRAIN")$score, subset(df, df$label == "TRAIN")$prediction )
results <- rbind(results, data.frame(train_directions = train_roc$direction, prediction = temp_test$prediction,
score = temp_test$score, id = rownames(temp_test),
characteristic = m, type_of_approach = str_c(type_of_data,"_", m)))
}
return(results)
}
raw_data <- getting_predictions_on_test_for_raw_data(all_data, "Usual",c(1:18), 19, models)
raw_data_long <- getting_predictions_on_test_for_raw_data(all_data_long, "Long",c(1:18), 19, models)
raw_data_long
DIR_input <- paste0(PATH, "2_NETWORKS/")
best_characteristics <- c("closeness_mean","closeness_max","closeness_min",
"Eweights_max", "Eweights_mean",
"strength_mean","strength_min","strength_max")
glm <- collect_predictions_on_test(all_data, "GLM", "Usual",DIR_input,c(1:18), 19, best_characteristics)
svm <- collect_predictions_on_test(all_data, "SVM", "Usual",DIR_input,c(1:18), 19, best_characteristics)
long_xgbtree <- collect_predictions_on_test(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
long_glmnet <- collect_predictions_on_test(all_data_long, "LONG_glmnet", "Long",DIR_input,c(1:18), 19, best_characteristics)
long_nnet <- collect_predictions_on_test(all_data_long, "LONG_nnet", "Long",DIR_input,c(1:18), 19, best_characteristics)
##############
# Non-longitudinal algorithms (unlike longitudinal ones) contain predictions for samples at the first time point.
# To make the results comparable, I removed these samples.
non_long_data <- all_data[[19]][[1]]
unique_patients <- unique(non_long_data$main_id)
exclude_samples <- c()
p <- unique_patients[1]
for (p in unique_patients) {
temp <- subset(non_long_data,non_long_data$main_id == p) #get patient
temp <-  temp[order(temp$Age.at.sample.taken..years),]  #order by age
exclude_samples <- c(exclude_samples, temp[1,]$id)
}
glm$excluded <- unlist(lapply(glm$id, function(x)  length(intersect(exclude_samples,x))))
svm$excluded <- unlist(lapply(svm$id, function(x)  length(intersect(exclude_samples,x))))
raw_data$excluded <- unlist(lapply(raw_data$id, function(x)  length(intersect(exclude_samples,x))))
raw_data_long$excluded <- unlist(lapply(raw_data_long$id, function(x)  length(intersect(exclude_samples,x))))
glm <- subset(glm,glm$excluded == 0)
svm <- subset(svm,svm$excluded == 0)
raw_data <- subset(raw_data,raw_data$excluded == 0)
raw_data_long <- subset(raw_data_long,raw_data_long$excluded == 0)
############## calculate AUC for each method, for each characteristic, for loocv and for main
raw_data_aucs <- auc_calculation(raw_data, "main", models)
raw_data_aucs
raw_data_long
raw_data
auc_calculation<- function(set_of_predictions, name_of_main_run, characteristics) {
auc_results <- data.frame()
main <- subset(set_of_predictions,set_of_predictions$run == name_of_main_run)
loocv <- subset(set_of_predictions,set_of_predictions$run != name_of_main_run)
for(ch in characteristics) {
temp_main <- subset(main,main$characteristic == ch)
temp_loocv <- subset(loocv,loocv$characteristic == ch)
auc_main <- pROC::roc(temp_main$score, temp_main$prediction)$auc
auc_loocv <- pROC::roc(temp_loocv$score, temp_loocv$prediction)$auc
auc_results <- rbind(auc_results, data.frame(type_of_approach = temp_main[1,]$type_of_approach,
characteristic = ch,
auc = auc_main,
type_of_experement = "main"),
data.frame(type_of_approach = temp_main[1,]$type_of_approach,
characteristic = ch,
auc = auc_loocv,
type_of_experement = "loocv"))
}
return(auc_results)
}
############## calculate AUC for each method, for each characteristic, for loocv and for main
raw_data_aucs <- auc_calculation(raw_data, "main", models)
raw_data_aucs
############## calculate AUC for each method, for each characteristic, for loocv and for main
raw_data_aucs <- auc_calculation(raw_data, "main", models)
raw_data_long_aucs <- auc_calculation(raw_data_long, "main", models)
glm_aucs <- auc_calculation(glm, "main", best_characteristics)
svm_aucs <- auc_calculation(svm, "main", best_characteristics)
long_xgbtree_aucs <- auc_calculation(long_xgbtree, "main", best_characteristics)
long_glmnet_aucs <- auc_calculation(long_glmnet, "main", best_characteristics)
long_nnet_aucs <- auc_calculation(long_nnet, "main", best_characteristics)
all_aucs <- rbind(raw_data_aucs, raw_data_long_aucs, glm_aucs, svm_aucs, long_xgbtree_aucs, long_glmnet_aucs, long_nnet_aucs)
head(all_aucs)
ggplot(all_aucs, aes(auc, fill = type_of_approach)) + geom_boxplot() + facet_grid(.~type_of_experement)
ggplot(all_aucs, aes(type_of_approach, auc, fill = type_of_approach)) + geom_boxplot() + facet_grid(.~type_of_experement)
ggplot(all_aucs, aes(type_of_approach, auc, fill = type_of_approach)) + geom_boxplot() + facet_grid(.~type_of_experement) + + theme(axis.text.x = element_text(angle=90, hjust=1))
ggplot(all_aucs, aes(type_of_approach, auc, fill = type_of_approach)) + geom_boxplot() + facet_grid(.~type_of_experement) +
theme(axis.text.x = element_text(angle=90, hjust=1))
all_aucs
unique(all_aucs$type_of_approach)
PATH = "/Users/Shared/Previously Relocated Items/Security/OC_synolitic_and_longit/" #PATH to main folder
source(paste0(PATH, "functions/general_functions.R")) #add functions
source(paste0(PATH, "functions/networks_functions.R")) #add functions of networks
# load data
load(paste0(PATH,"1_DATA/all_data.RData"))
load(paste0(PATH,"1_DATA/all_data_long.RData"))
############## getting predictions "xgbTree", "nnet", "glmnet" applying to raw data or raw longit data (to indices of proteins)
models <- c("xgbTree", "nnet", "glmnet")
results_on_raw_data <- data.frame()
raw_data <- getting_predictions_on_test_for_raw_data(all_data, "Raw-Usual",c(1:18), 19, models)
raw_data_aucs
raw_data
############## calculate AUC for each method, for each characteristic, for loocv and for main
raw_data_aucs <- auc_calculation(raw_data, "main", models)
raw_data_long_aucs <- auc_calculation(raw_data_long, "main", models)
raw_data_aucs$type_of_approach <- str_c("Raw_", raw_data_aucs$type_of_approach)
raw_data_long_aucs$type_of_approach <- str_c("Raw_", raw_data_long_aucs$type_of_approach)
glm_aucs <- auc_calculation(glm, "main", best_characteristics)
svm_aucs <- auc_calculation(svm, "main", best_characteristics)
long_xgbtree_aucs <- auc_calculation(long_xgbtree, "main", best_characteristics)
long_glmnet_aucs <- auc_calculation(long_glmnet, "main", best_characteristics)
long_nnet_aucs <- auc_calculation(long_nnet, "main", best_characteristics)
all_aucs <- rbind(raw_data_aucs, raw_data_long_aucs, glm_aucs, svm_aucs, long_xgbtree_aucs, long_glmnet_aucs, long_nnet_aucs)
unique(all_aucs$type_of_approach)
ggplot(all_aucs, aes(factor(x, levels=c("B", "C", "A")), auc)) + geom_boxplot() + facet_grid(.~type_of_experement) +
theme(axis.text.x = element_text(angle=90, hjust=1))
unique(all_aucs$type_of_approach)
PATH = "/Users/Shared/Previously Relocated Items/Security/OC_synolitic_and_longit/" #PATH to main folder
source(paste0(PATH, "functions/general_functions.R")) #add functions
source(paste0(PATH, "functions/networks_functions.R")) #add functions of networks
# load data
load(paste0(PATH,"1_DATA/all_data.RData"))
load(paste0(PATH,"1_DATA/all_data_long.RData"))
############## getting predictions "xgbTree", "nnet", "glmnet" applying to raw data or raw longit data (to indices of proteins)
models <- c("xgbTree", "nnet", "glmnet")
results_on_raw_data <- data.frame()
raw_data <- getting_predictions_on_test_for_raw_data(all_data, "Usual",c(1:18), 19, models)
raw_data_long <- getting_predictions_on_test_for_raw_data(all_data_long, "Long",c(1:18), 19, models)
DIR_input <- paste0(PATH, "2_NETWORKS/")
best_characteristics <- c("closeness_mean","closeness_max","closeness_min",
"Eweights_max", "Eweights_mean",
"strength_mean","strength_min","strength_max")
glm <- collect_predictions_on_test(all_data, "GLM", "Usual",DIR_input,c(1:18), 19, best_characteristics)
svm <- collect_predictions_on_test(all_data, "SVM", "Usual",DIR_input,c(1:18), 19, best_characteristics)
long_xgbtree <- collect_predictions_on_test(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
long_glmnet <- collect_predictions_on_test(all_data_long, "LONG_glmnet", "Long",DIR_input,c(1:18), 19, best_characteristics)
long_nnet <- collect_predictions_on_test(all_data_long, "LONG_nnet", "Long",DIR_input,c(1:18), 19, best_characteristics)
##############
# Non-longitudinal algorithms (unlike longitudinal ones) contain predictions for samples at the first time point.
# To make the results comparable, I removed these samples.
non_long_data <- all_data[[19]][[1]]
unique_patients <- unique(non_long_data$main_id)
exclude_samples <- c()
p <- unique_patients[1]
for (p in unique_patients) {
temp <- subset(non_long_data,non_long_data$main_id == p) #get patient
temp <-  temp[order(temp$Age.at.sample.taken..years),]  #order by age
exclude_samples <- c(exclude_samples, temp[1,]$id)
}
glm$excluded <- unlist(lapply(glm$id, function(x)  length(intersect(exclude_samples,x))))
svm$excluded <- unlist(lapply(svm$id, function(x)  length(intersect(exclude_samples,x))))
raw_data$excluded <- unlist(lapply(raw_data$id, function(x)  length(intersect(exclude_samples,x))))
raw_data_long$excluded <- unlist(lapply(raw_data_long$id, function(x)  length(intersect(exclude_samples,x))))
glm <- subset(glm,glm$excluded == 0)
svm <- subset(svm,svm$excluded == 0)
raw_data <- subset(raw_data,raw_data$excluded == 0)
raw_data_long <- subset(raw_data_long,raw_data_long$excluded == 0)
############## calculate AUC for each method, for each characteristic, for loocv and for main
raw_data_aucs <- auc_calculation(raw_data, "main", models)
raw_data_long_aucs <- auc_calculation(raw_data_long, "main", models)
raw_data_aucs$type_of_approach <- str_c("Raw_", raw_data_aucs$type_of_approach)
raw_data_long_aucs$type_of_approach <- str_c("Raw_", raw_data_long_aucs$type_of_approach)
glm_aucs <- auc_calculation(glm, "main", best_characteristics)
svm_aucs <- auc_calculation(svm, "main", best_characteristics)
long_xgbtree_aucs <- auc_calculation(long_xgbtree, "main", best_characteristics)
long_glmnet_aucs <- auc_calculation(long_glmnet, "main", best_characteristics)
long_nnet_aucs <- auc_calculation(long_nnet, "main", best_characteristics)
all_aucs <- rbind(raw_data_aucs, raw_data_long_aucs, glm_aucs, svm_aucs, long_xgbtree_aucs, long_glmnet_aucs, long_nnet_aucs)
unique(all_aucs$type_of_approach)
############## calculate AUC for each method, for each characteristic, for loocv and for main
raw_data_aucs <- auc_calculation(raw_data, "main", models)
raw_data_long_aucs <- auc_calculation(raw_data_long, "main", models)
raw_data_aucs
############## calculate AUC for each method, for each characteristic, for loocv and for main
raw_data_aucs <- auc_calculation(raw_data, "main", models)
raw_data_long_aucs <- auc_calculation(raw_data_long, "main", models)
raw_data_aucs$type_of_approach <- str_c("Raw_Usual_", raw_data_aucs$characteristic)
raw_data_long_aucs$type_of_approach <- str_c("Raw_Long_", raw_data_long_aucs$characteristic)
glm_aucs <- auc_calculation(glm, "main", best_characteristics)
svm_aucs <- auc_calculation(svm, "main", best_characteristics)
long_xgbtree_aucs <- auc_calculation(long_xgbtree, "main", best_characteristics)
long_glmnet_aucs <- auc_calculation(long_glmnet, "main", best_characteristics)
long_nnet_aucs <- auc_calculation(long_nnet, "main", best_characteristics)
all_aucs <- rbind(raw_data_aucs, raw_data_long_aucs, glm_aucs, svm_aucs, long_xgbtree_aucs, long_glmnet_aucs, long_nnet_aucs)
unique(all_aucs$type_of_approach)
ggplot(all_aucs, aes(factor(x, levels=c("B", "C", "A")), auc)) + geom_boxplot() + facet_grid(.~type_of_experement) +
theme(axis.text.x = element_text(angle=90, hjust=1))
unique(all_aucs$type_of_approach)
ggplot(all_aucs, aes(factor(x, levels=unique(all_aucs$type_of_approach)), auc)) + geom_boxplot() + facet_grid(.~type_of_experement) +
theme(axis.text.x = element_text(angle=90, hjust=1))
ggplot(all_aucs, aes(factor(type_of_approach, levels=unique(all_aucs$type_of_approach)), auc)) + geom_boxplot() + facet_grid(.~type_of_experement) +
theme(axis.text.x = element_text(angle=90, hjust=1))
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
collect_predictions_on_edge_CA125_HE4 <- function(all_data, type_PN, type_data, DIR, loocv_range, num_of_main, characteristics) {
subDir <- paste0(DIR,type_data,"_", type_PN,"/")
all_predicitons = data.frame()
for(i in loocv_range) {
name_of_set <- all_data[[i]][[3]]
z <- load(paste0(subDir,type_data,"_",name_of_set,"_networks.RData"))
print(z)
break
predictions <- get_chars_predictions_for_tests(chars, characteristics)
predictions$run = i
all_predicitons <- rbind(all_predicitons, predictions)
}
name_of_main_set <- all_data[[num_of_main]][[3]]
load(paste0(subDir,type_data,"_",name_of_main_set,"_chars.RData"))
predictions_main <- get_chars_predictions_for_tests(chars, characteristics)
predictions_main$run = "main"
all_predicitons <- rbind(all_predicitons, predictions_main)
all_predicitons$type_of_approach <- str_c(type_data,"_", type_PN)
return(all_predicitons)
}
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
collect_predictions_on_edge_CA125_HE4 <- function(all_data, type_PN, type_data, DIR, loocv_range, num_of_main, characteristics) {
subDir <- paste0(DIR,type_data,"_", type_PN,"/")
all_predicitons = data.frame()
for(i in loocv_range) {
name_of_set <- all_data[[i]][[3]]
load(paste0(subDir,type_data,"_",name_of_set,"_networks.RData"))
print(lst)
break
predictions <- get_chars_predictions_for_tests(chars, characteristics)
predictions$run = i
all_predicitons <- rbind(all_predicitons, predictions)
}
name_of_main_set <- all_data[[num_of_main]][[3]]
load(paste0(subDir,type_data,"_",name_of_main_set,"_chars.RData"))
predictions_main <- get_chars_predictions_for_tests(chars, characteristics)
predictions_main$run = "main"
all_predicitons <- rbind(all_predicitons, predictions_main)
all_predicitons$type_of_approach <- str_c(type_data,"_", type_PN)
return(all_predicitons)
}
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
collect_predictions_on_edge_CA125_HE4 <- function(all_data, type_PN, type_data, DIR, loocv_range, num_of_main, characteristics) {
subDir <- paste0(DIR,type_data,"_", type_PN,"/")
all_predicitons = data.frame()
for(i in loocv_range) {
data <- all_data[[i]][[1]]
name_of_set <- all_data[[i]][[3]]
load(paste0(subDir,type_data,"_",name_of_set,"_networks.RData"))
print(lst[6,data$id])
break
predictions <- get_chars_predictions_for_tests(chars, characteristics)
predictions$run = i
all_predicitons <- rbind(all_predicitons, predictions)
}
name_of_main_set <- all_data[[num_of_main]][[3]]
load(paste0(subDir,type_data,"_",name_of_main_set,"_chars.RData"))
predictions_main <- get_chars_predictions_for_tests(chars, characteristics)
predictions_main$run = "main"
all_predicitons <- rbind(all_predicitons, predictions_main)
all_predicitons$type_of_approach <- str_c(type_data,"_", type_PN)
return(all_predicitons)
}
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
collect_predictions_on_edge_CA125_HE4 <- function(all_data, type_PN, type_data, DIR, loocv_range, num_of_main, characteristics) {
subDir <- paste0(DIR,type_data,"_", type_PN,"/")
all_predicitons = data.frame()
for(i in loocv_range) {
data <- all_data[[i]][[1]]
name_of_set <- all_data[[i]][[3]]
load(paste0(subDir,type_data,"_",name_of_set,"_networks.RData"))
print(data$id)
print(lst[6,data$id])
break
predictions <- get_chars_predictions_for_tests(chars, characteristics)
predictions$run = i
all_predicitons <- rbind(all_predicitons, predictions)
}
name_of_main_set <- all_data[[num_of_main]][[3]]
load(paste0(subDir,type_data,"_",name_of_main_set,"_chars.RData"))
predictions_main <- get_chars_predictions_for_tests(chars, characteristics)
predictions_main$run = "main"
all_predicitons <- rbind(all_predicitons, predictions_main)
all_predicitons$type_of_approach <- str_c(type_data,"_", type_PN)
return(all_predicitons)
}
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
collect_predictions_on_edge_CA125_HE4 <- function(all_data, type_PN, type_data, DIR, loocv_range, num_of_main, characteristics) {
subDir <- paste0(DIR,type_data,"_", type_PN,"/")
all_predicitons = data.frame()
for(i in loocv_range) {
data <- all_data[[i]][[1]]
name_of_set <- all_data[[i]][[3]]
load(paste0(subDir,type_data,"_",name_of_set,"_networks.RData"))
print(lst)
print(data$id)
print(lst[6,data$id])
break
predictions <- get_chars_predictions_for_tests(chars, characteristics)
predictions$run = i
all_predicitons <- rbind(all_predicitons, predictions)
}
name_of_main_set <- all_data[[num_of_main]][[3]]
load(paste0(subDir,type_data,"_",name_of_main_set,"_chars.RData"))
predictions_main <- get_chars_predictions_for_tests(chars, characteristics)
predictions_main$run = "main"
all_predicitons <- rbind(all_predicitons, predictions_main)
all_predicitons$type_of_approach <- str_c(type_data,"_", type_PN)
return(all_predicitons)
}
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
collect_predictions_on_edge_CA125_HE4 <- function(all_data, type_PN, type_data, DIR, loocv_range, num_of_main, characteristics) {
subDir <- paste0(DIR,type_data,"_", type_PN,"/")
all_predicitons = data.frame()
for(i in loocv_range) {
data <- all_data[[i]][[1]]
name_of_set <- all_data[[i]][[3]]
load(paste0(subDir,type_data,"_",name_of_set,"_networks.RData"))
print(lst)
print(data$id)
print(lst[[1]][6,data$id])
break
predictions <- get_chars_predictions_for_tests(chars, characteristics)
predictions$run = i
all_predicitons <- rbind(all_predicitons, predictions)
}
name_of_main_set <- all_data[[num_of_main]][[3]]
load(paste0(subDir,type_data,"_",name_of_main_set,"_chars.RData"))
predictions_main <- get_chars_predictions_for_tests(chars, characteristics)
predictions_main$run = "main"
all_predicitons <- rbind(all_predicitons, predictions_main)
all_predicitons$type_of_approach <- str_c(type_data,"_", type_PN)
return(all_predicitons)
}
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
collect_predictions_on_edge_CA125_HE4 <- function(all_data, type_PN, type_data, DIR, loocv_range, num_of_main, characteristics) {
subDir <- paste0(DIR,type_data,"_", type_PN,"/")
all_predicitons_loocv = data.frame()
for(i in loocv_range) {
data <- all_data[[i]][[1]]
name_of_set <- all_data[[i]][[3]]
load(paste0(subDir,type_data,"_",name_of_set,"_networks.RData"))
data$predictions <- as.vector(t(lst[[1]][6,data$id]))
all_predicitons_loocv <- rbind(all_predicitons_loocv, subset(data,data$label == "TEST")[,c("score", "predictions")])
}
data_main <- all_data[[num_of_main]][[1]]
name_of_set <- all_data[[num_of_main]][[3]]
load(paste0(subDir,type_data,"_",name_of_set,"_networks.RData"))
data_main$predictions <- as.vector(t(lst[[1]][6,data_main$id]))
all_predicitons_main <- subset(data_main,data_main$label == "TEST")[,c("score", "predictions")]
auc_main <- pROC::roc(all_predicitons_main$score, all_predicitons_main$predictions)$auc
auc_loocv <- pROC::roc(all_predicitons_loocv$score, all_predicitons_loocv$predictions)$auc
print(str_c("loocv: ", auc_loocv,"; main: ",auc_main))
}
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
fig1 <- ggplot(all_aucs, aes(factor(type_of_approach, levels=unique(all_aucs$type_of_approach)), auc)) + geom_boxplot() + facet_grid(.~type_of_experement) +
theme(axis.text.x = element_text(angle=90, hjust=1)) + labs(x="approach")
fig1
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### ##### #####
print("only edge of CA125 and HE4, Long, XgbTree")
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
collect_predictions_on_edge_CA125_HE4 <- function(all_data, type_PN, type_data, DIR, loocv_range, num_of_main, characteristics) {
subDir <- paste0(DIR,type_data,"_", type_PN,"/")
all_predicitons_loocv = data.frame()
for(i in loocv_range) {
data <- all_data[[i]][[1]]
name_of_set <- all_data[[i]][[3]]
load(paste0(subDir,type_data,"_",name_of_set,"_networks.RData"))
data$predictions <- as.vector(t(lst[[1]][6,data$id]))
all_predicitons_loocv <- rbind(all_predicitons_loocv, subset(data,data$label == "TEST")[,c("score", "predictions")])
}
data_main <- all_data[[num_of_main]][[1]]
name_of_set <- all_data[[num_of_main]][[3]]
load(paste0(subDir,type_data,"_",name_of_set,"_networks.RData"))
data_main$predictions <- as.vector(t(lst[[1]][6,data_main$id]))
all_predicitons_main <- subset(data_main,data_main$label == "TEST")[,c("score", "predictions")]
auc_main <- pROC::roc(all_predicitons_main$score, all_predicitons_main$predictions)$auc
auc_loocv <- pROC::roc(all_predicitons_loocv$score, all_predicitons_loocv$predictions)$auc
return(str_c("loocv: ", auc_loocv,"; main: ",auc_main))
}
collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
a<- collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
print("only edge of CA125 and HE4, Long, XgbTree")
a
best_loocv
loocv <- subset(all_aucs,all_aucs$type_of_experement == "loocv")
##### best result on loocv
best_loocv <- subset(loocv, loocv$auc == max(loocv$auc))
best_loocv
a<- collect_predictions_on_edge_CA125_HE4(all_data_long, "LONG_xgbTree", "Long",DIR_input,c(1:18), 19, best_characteristics)
print("only edge of CA125 and HE4, Long, XgbTree:")
print(a)
print("Best Network result, Long, XgbTree:")
print(str_c("loocv: ",best_loocv$auc, "; main: ",subset(all_aucs, all_aucs$characteristic == best_loocv$characteristic & all_aucs$type_of_approach == best_loocv$type_of_approach &
all_aucs$type_of_experement == "main")$auc ))
